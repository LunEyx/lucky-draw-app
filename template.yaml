AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  lucky-draw-app

  Sample SAM Template for lucky-draw-app

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    CodeUri: lucky-draw/
    Runtime: nodejs20.x
    Architectures:
    - x86_64
    LoggingConfig:
      LogFormat: JSON
    Environment:
      Variables:
        USER_TABLE_NAME: !Ref UserTable
        PRIZE_TABLE_NAME: !Ref PrizeTable
        INVENTORY_TABLE_NAME: !Ref InventoryTable

Parameters:
  ProjectName:
    Type: String
    Default: lucky-draw
  Env:
    Type: String
    Default: dev

Resources:
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Sub ${Env}
      Auth:
        DefaultAuthorizer: CognitoAuthorizer
        Authorizers:
          CognitoAuthorizer:
            UserPoolArn: !GetAtt CognitoUserPool.Arn

  # Admin Functions
  CreatePrizeFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-${Env}-create-prize
      Handler: prize.createPrizeHandler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref PrizeTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /prizes
            Method: post
    Metadata:
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - prize.ts

  GetPrizesFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      FunctionName: !Sub ${ProjectName}-${Env}-get-prizes
      Handler: prize.getPrizesHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PrizeTable
      Events:
        ApiEvent:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /prizes
            Method: get
            Auth:
              Authorizer: NONE
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - prize.ts

  GetInventoryFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-${Env}-get-inventory
      Handler: inventory.getInventoryHandler
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref PrizeTable
        - DynamoDBReadPolicy:
            TableName: !Ref InventoryTable
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /inventory
            Method: get
            Auth:
              Authorizer: NONE
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - inventory.ts

  UserTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${ProjectName}-${Env}-user-table
      PrimaryKey:
        Name: id
        Type: String

  PrizeTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${ProjectName}-${Env}-prize-table
      PrimaryKey:
        Name: id
        Type: String

  InventoryTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: !Sub ${ProjectName}-${Env}-inventory-table
      PrimaryKey:
        Name: id
        Type: String

  PostConfirmationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${ProjectName}-${Env}-post-confirmation
      Handler: app.postConfirmationHandler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref UserTable
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: es2020
        Sourcemap: true
        EntryPoints:
        - app.ts

  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub ${ProjectName}-${Env}-user-pool
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true
          RequireUppercase: true
      LambdaConfig:
        PostConfirmation: !GetAtt PostConfirmationFunction.Arn

  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${ProjectName}-${Env}-user-pool-client
      UserPoolId: !Ref CognitoUserPool

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ApiGateway:
    Description: API Gateway endpoint URL
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Env}"
